!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
C	sparc.py	/^C = (UMAX - UMIN)\/(REFMAX - REFMIN)$/;"	v
DataCloud	sparc.py	/^class DataCloud:$/;"	c
MAXSTEPS	sparc.py	/^MAXSTEPS = 3000 # Max number of steps$/;"	v
Plant	sparc.py	/^class Plant:$/;"	c
Plotting	sparc.py	/^import matplotlib.pyplot as plt # Plotting$/;"	i
RADIUS_UPDATE_CONST	sparc.py	/^RADIUS_UPDATE_CONST = 0.5$/;"	v
REFMAX	sparc.py	/^REFMAX = 10.0     # Range Max$/;"	v
REFMIN	sparc.py	/^REFMIN = 0.0    # Range Min$/;"	v
STEPTIME	sparc.py	/^STEPTIME = 0.50   # Step time in seconds$/;"	v
U1	sparc.py	/^U1 = 0.0 # Start control signal$/;"	v
UMAX	sparc.py	/^UMAX = 20.0     # Range Max $/;"	v
UMIN	sparc.py	/^UMIN = -20.0    # Range Min$/;"	v
WaterTank	sparc.py	/^class WaterTank:$/;"	c
X_SIZE	sparc.py	/^X_SIZE = 2  # Dimension of the input (measured by sensors of the plant)$/;"	v
__init__	sparc.py	/^    def __init__(self, y1, t):$/;"	m	class:Plant
__init__	sparc.py	/^    def __init__(self, y1, t):$/;"	m	class:WaterTank
__init__	sparc.py	/^    def __init__(self, z, sigma):$/;"	m	class:DataCloud
__update_radius__	sparc.py	/^    def __update_radius__(self, p, prev_r, sigma):$/;"	m	class:DataCloud	file:
__update_sigma_sq__	sparc.py	/^    def __update_sigma_sq__(self, curr_x, xf, prev_sigma_sq, new_N, i):$/;"	m	class:DataCloud	file:
add_point	sparc.py	/^    def add_point(self, curr_z):$/;"	m	class:DataCloud
arrays	sparc.py	/^import numpy as np  # arrays$/;"	i
axes	sparc.py	/^axes = fig.add_axes([0.1, 0.1, 0.8, 0.8])$/;"	v
fig	sparc.py	/^fig = plt.figure();$/;"	v
generate_input	sparc.py	/^def generate_input(y, yprev, ref, refprev, t):$/;"	f
get_consequent	sparc.py	/^    def get_consequent(self):$/;"	m	class:DataCloud
get_global_density	sparc.py	/^def get_global_density(g_csi, g_b, curr_z, k):$/;"	f
get_local_density	sparc.py	/^    def get_local_density(self, x):$/;"	m	class:DataCloud
get_y	sparc.py	/^    def get_y(self):$/;"	m	class:Plant
get_y	sparc.py	/^    def get_y(self):$/;"	m	class:WaterTank
math	sparc.py	/^import math         # sqrt$/;"	i
matplotlib	sparc.py	/^import matplotlib.pyplot as plt # Plotting$/;"	i
np	sparc.py	/^import numpy as np  # arrays$/;"	i
plt	sparc.py	/^import matplotlib.pyplot as plt # Plotting$/;"	i
reference	sparc.py	/^def reference(k):$/;"	f
refpoints	sparc.py	/^refpoints = []$/;"	v
sparc	sparc.py	/^def sparc():$/;"	f
sqrt	sparc.py	/^import math         # sqrt$/;"	i
step	sparc.py	/^import time         # time step$/;"	i
time	sparc.py	/^import time         # time step$/;"	i
update	sparc.py	/^    def update(self, u):$/;"	m	class:Plant
update	sparc.py	/^    def update(self, u):$/;"	m	class:WaterTank
update_consequent	sparc.py	/^    def update_consequent(self, prev_md, curr_x, prev_ref, curr_y, prev_u):$/;"	m	class:DataCloud
update_focal_point	sparc.py	/^    def update_focal_point(self, z):$/;"	m	class:DataCloud
ypoints	sparc.py	/^ypoints = []$/;"	v
